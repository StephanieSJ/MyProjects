<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>JobInstance = noone;
InstanceNumber = 0;
TopOption = 0;
MaxOptions = 6;
TotalOptions = 0;
Options = 0;
Width = 0;
Height = 83;
Selection = -1;
SelectionHover = false;

alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (TotalOptions &gt; MaxOptions)
{
    var ScrollBarInstance = instance_create(0, 0, obj_ScrollBar);
    with (ScrollBarInstance)
    {
        InstanceNumber = other.InstanceNumber;
        LeftOffset = other.LeftOffset;
        Menu = other;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (point_in_rectangle(device_mouse_x_to_gui(0), device_mouse_y_to_gui(0), global.SurvivalMenuX - LeftOffset - Width, global.SurvivalMenuY - FullHeight, global.SurvivalMenuX - LeftOffset + Width, global.SurvivalMenuY + FullHeight))
{
    SelectionHover = true;
    global.SelectionHover = true;
}
else
{
    SelectionHover = false;
    scr_CheckSelectionHover();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (SelectionHover)
{
    Selection = TopOption + ((device_mouse_y_to_gui(0) - (global.SurvivalMenuY - FullHeight)) div Height);
    if (Selection &lt; TotalOptions)
    {
        if (global.MenuCreated == 'Survivors')
        {
            with (Options[Selection])
            {
                alarm[2] = 1;
            }
        }
        else if (global.MenuCreated == 'Survivor')
        {
            scr_UpdateWeapons(Options[Selection]);
            global.SelectionHover = false;
            scr_DestroyScrollingMenu(0);
        }
        else if (global.MenuCreated == 'Electronics')
        {
            if (instance_exists(obj_TimePlanner))
            {
                with (obj_TimePlanner)
                {
                    instance_destroy();
                }
            }
            with (Options[Selection])
            {
                alarm[0] = 1;
            }
        }
        else if (global.MenuCreated == 'Scavenge') and (InstanceNumber == 0)
        {
            scr_DestroyScrollingMenu(1);
            var AvailableSurvivors = scr_GetAvailableSurvivors();
            var NumberAvailableSurvivors = array_length_1d(AvailableSurvivors);
            var Instance = instance_create(0, 0, obj_ScrollingMenuController);
            var OtherInstance = Options[Selection];
            with (Instance)
            {
                JobInstance = OtherInstance;
                InstanceNumber = 1;
                Options = AvailableSurvivors;
                TotalOptions = NumberAvailableSurvivors;
                LeftOffset = 0;
                Width = 200;
                FullHeight = 250;
            }            
        }
        else if (global.MenuCreated == 'Scavenge') and (InstanceNumber == 1)
        {
            with (Options[Selection])
            {
                Assignment = 'Scavenge';
                State = scr_Scavenge;
                Location = other.JobInstance;
                TimeLeft = alarm[3];
                alarm[3] = 1;
                alarm[4] = 4500;
                SuccessChance = scr_CalculateSuccessChance(self);
            }
            scr_DestroyScrollingMenu(1); 
        }
        else if (global.MenuCreated == 'Jobs') and (InstanceNumber == 0)
        {
            scr_DestroyScrollingMenu(2);
            scr_DestroyScrollingMenu(1);
            var JobSpaces = scr_CreateJobArray(Options[Selection]);
            var JobOptions = array_length_1d(JobSpaces);
            var Instance = instance_create(0, 0, obj_ScrollingMenuController);
            with (Instance)
            {
                InstanceNumber = 1;
                Options = JobSpaces;
                TotalOptions = JobOptions;
                LeftOffset = 10;
                Width = 200;
                FullHeight = 250;
            }
        }
        else if (global.MenuCreated == 'Jobs') and (InstanceNumber == 1)
        {
            scr_DestroyScrollingMenu(2);
            var AvailableSurvivors = scr_GetAvailableSurvivors();
            var NumberAvailableSurvivors = array_length_1d(AvailableSurvivors);
            var Instance = instance_create(0, 0, obj_ScrollingMenuController);
            var OtherInstance = Options[Selection];
            with (Instance)
            {
                JobInstance = OtherInstance;
                InstanceNumber = 2;
                Options = AvailableSurvivors;
                TotalOptions = NumberAvailableSurvivors;
                LeftOffset = -420;
                Width = 200;
                FullHeight = 250;
            }
        }
        else if (global.MenuCreated == 'Jobs') and (InstanceNumber == 2)
        {
            if (Options[Selection] == noone)
            {
                with (JobInstance)
                {
                    with (Person)
                    {
                        Assignment = 'Nothing';
                        AssignedObject = noone;
                        Counter = 0;
                        if ((State == scr_Gardening) or (State == scr_Sniping) or (State == scr_Cooking) or (State == scr_Cleaning) or (State == scr_Doctoring) or (State == scr_Washing))
                        {
                            State = scr_SIdle;
                        }
                    }
                    Person = noone;
                    Assigned = 'NOONE';
                }
            }
            else
            {
                with (JobInstance)
                {
                    with (Person)
                    {
                        Assignment = 'Nothing';
                        AssignedObject = noone;
                        Counter = 0;
                        if ((State == scr_Gardening) or (State == scr_Sniping) or (State == scr_Cooking) or (State == scr_Cleaning) or (State == scr_Doctoring) or (State == scr_Washing))
                        {
                            State = scr_SIdle;
                        }
                    }
                    Person = other.Options[other.Selection];
                    Assigned = other.Options[other.Selection].Name;
                    var NewState = scr_SIdle;
                    switch (Job)
                    {
                        case 'GARDEN':
                        {
                            var NewState = scr_Gardening;
                            break;
                        }
                        
                        case 'SNIPER NEST':
                        {
                            var NewState = scr_Sniping;
                            break;
                        }
                        
                        case 'COOKER':
                        {
                            var NewState = scr_Cooking;
                            break;
                        }
                        
                        case 'WASHING MACHINE':
                        {
                            var NewState = scr_Washing;
                            break;
                        }
                        
                        case 'HEALING STATION':
                        {
                            var NewState = scr_Doctoring;
                            break;
                        }
                        
                        case 'CLEANING STATION':
                        {
                            var NewState = scr_Cleaning;
                            break;
                        }
                    }
                    with (Person)
                    {
                        Counter = 0;
                        Assignment = other.Job;
                        AssignedObject = other;
                        if (State == scr_Healing)
                        {
                            HealingStation.Used = false;
                        }
                        State = NewState;
                    }
                }
            }
            
            scr_DestroyScrollingMenu(2);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (TotalOptions &gt; 0)
{
    for (var i = 0; i + TopOption &lt; TotalOptions; i++)
    {
        if (i &lt; MaxOptions)
        {
            draw_set_colour(c_ltgray);
            draw_rectangle(global.SurvivalMenuX - LeftOffset - Width, (global.SurvivalMenuY - FullHeight) + (i * Height) + (i * 1), global.SurvivalMenuX - LeftOffset + Width, (global.SurvivalMenuY - FullHeight) + ((i + 1) * Height) + (i * 1), false);
            if (point_in_rectangle(device_mouse_x_to_gui(0), device_mouse_y_to_gui(0), global.SurvivalMenuX - LeftOffset - Width, (global.SurvivalMenuY - FullHeight) + (i * Height), global.SurvivalMenuX - LeftOffset + Width, (global.SurvivalMenuY - FullHeight) + ((i + 1) * Height)))
            {
                draw_set_colour(c_red);
            }
            else
            {
                draw_set_colour(c_black);
            } 
            draw_rectangle(global.SurvivalMenuX - LeftOffset - Width, (global.SurvivalMenuY - FullHeight) + (i * Height) + (i * 1), global.SurvivalMenuX - LeftOffset + Width, (global.SurvivalMenuY - FullHeight) + ((i + 1) * Height) + (i * 1), true);
            if (global.MenuCreated == 'Survivor') or ((global.MenuCreated == 'Scavenge') and (InstanceNumber == 0))
            {
                draw_text(global.SurvivalMenuX - LeftOffset, (global.SurvivalMenuY - FullHeight) + ((i * Height) + 10), Options[i + TopOption]);
            }
            else if (global.MenuCreated == 'Scavenge') and (global.SelectionHover)
            {
                draw_text(global.SurvivalMenuX - LeftOffset, (global.SurvivalMenuY - FullHeight) + ((i * Height) + 10), string(Options[i + TopOption].Name));
                draw_text(global.SurvivalMenuX - LeftOffset, (global.SurvivalMenuY - FullHeight) + ((i * Height) + 20), string(scr_CalculateSuccessChance(Options[i + TopOption])));
            }
            else if (global.MenuCreated == 'Survivors')
            {
                draw_set_font(global.SmallFont);
                draw_set_halign(fa_center);
                draw_text_transformed(global.SurvivalMenuX - LeftOffset + 40, (global.SurvivalMenuY - FullHeight) + ((i * Height) + (Height / 2) - 10 + (i * 1)), string(Options[i + TopOption].Name), 2, 2, 0);
                draw_set_font(global.Font);
                scr_DrawState(global.SurvivalMenuX - LeftOffset + 40, (global.SurvivalMenuY - FullHeight) + ((i * Height) + (Height / 2) + 20 + (i * 1)), Options[i + TopOption]);
                draw_sprite_ext(Options[i + TopOption].SurvivorSprite, 0, global.SurvivalMenuX - LeftOffset - Width + 40, (global.SurvivalMenuY - FullHeight) + ((i * Height) + (Height / 2) + (i * 1)), 2, 2, 0, c_white, 1);
                draw_line(global.SurvivalMenuX - LeftOffset - Width + 80, (global.SurvivalMenuY - FullHeight) + (i * Height), global.SurvivalMenuX - LeftOffset - Width + 80, (global.SurvivalMenuY - FullHeight) + (i * 1) + ((i + 1) * Height));
            }
            else if (global.MenuCreated == 'Electronics')
            {
                draw_set_font(global.SmallFont);
                draw_set_halign(fa_center);
                draw_text_transformed(global.SurvivalMenuX - LeftOffset + 40, (global.SurvivalMenuY - FullHeight) + ((i * Height) + (Height / 2) - 10 + (i * 1)), string(Options[i + TopOption].Name), 2, 2, 0);
                draw_set_font(global.Font);
                if (Options[i + TopOption].Active)
                {
                    draw_text(global.SurvivalMenuX - LeftOffset + 40, (global.SurvivalMenuY - FullHeight) + ((i * Height) + (Height / 2) + 20 + (i * 1)), 'ON');
                }
                else
                {
                    draw_text(global.SurvivalMenuX - LeftOffset + 40, (global.SurvivalMenuY - FullHeight) + ((i * Height) + (Height / 2) + 20 + (i * 1)), 'OFF');
                }
                draw_line(global.SurvivalMenuX - LeftOffset - Width + 80, (global.SurvivalMenuY - FullHeight) + (i * Height), global.SurvivalMenuX - LeftOffset - Width + 80, (global.SurvivalMenuY - FullHeight) + (i * 1) + ((i + 1) * Height));
                if (Options[i + TopOption].sprite_index == spr_Generator)
                {
                    draw_sprite_ext(Options[i + TopOption].sprite_index, 0, global.SurvivalMenuX - LeftOffset - Width + 25, (global.SurvivalMenuY - FullHeight) - 15 + ((i * Height) + (Height / 2) + (i * 1)), 2, 2, 0, c_white, 1);
                }
                else
                {
                    draw_sprite_ext(Options[i + TopOption].sprite_index, 0, global.SurvivalMenuX - LeftOffset - Width + 40, (global.SurvivalMenuY - FullHeight) + ((i * Height) + (Height / 2) + (i * 1)), 2, 2, 0, c_white, 1);
                }
            }
            else if (global.MenuCreated != 'Jobs')
            {
                draw_text(global.SurvivalMenuX - LeftOffset, (global.SurvivalMenuY - FullHeight) + ((i * Height) + 10), string(Options[i + TopOption].Name));
            }
            else if (global.MenuCreated == 'Jobs') and (InstanceNumber == 0)
            {
                draw_set_font(global.SmallFont);
                draw_set_halign(fa_center);
                draw_text_transformed(global.SurvivalMenuX - LeftOffset, (global.SurvivalMenuY - FullHeight) + ((i * Height) + (Height / 2) + (i * 1)), string(Options[i + TopOption]), 2, 2, 0);
            }
            else if (global.MenuCreated == 'Jobs') and (InstanceNumber == 1)
            {
                 draw_set_font(global.SmallFont);
                 draw_set_halign(fa_center);
                 draw_text_transformed(global.SurvivalMenuX - LeftOffset + 40, (global.SurvivalMenuY - FullHeight) + ((i * Height) + (Height / 2) - 10 + (i * 1)), string(Options[i + TopOption].Job), 2, 2, 0);
                 draw_set_font(global.Font);
                 draw_text(global.SurvivalMenuX - LeftOffset + 40, (global.SurvivalMenuY - FullHeight) + ((i * Height) + (Height / 2) + 20 + (i * 1)), Options[i + TopOption].Assigned);
                 if (Options[i + TopOption].Job == 'SNIPER NEST')
                 {
                    draw_sprite_ext(Options[i + TopOption].sprite_index, 0, global.SurvivalMenuX - LeftOffset - Width + 27, (global.SurvivalMenuY - FullHeight) + 25 + ((i * Height) + (i * 1)), 2, 2, 0, c_white, 1);
                 }
                 else
                 {
                    draw_sprite_ext(Options[i + TopOption].sprite_index, 0, global.SurvivalMenuX - LeftOffset - Width + 40, (global.SurvivalMenuY - FullHeight) + ((i * Height) + (Height / 2) + (i * 1)), 2, 2, 0, c_white, 1);
                 }
                 draw_line(global.SurvivalMenuX - LeftOffset - Width + 80, (global.SurvivalMenuY - FullHeight) + (i * Height), global.SurvivalMenuX - LeftOffset - Width + 80, (global.SurvivalMenuY - FullHeight) + (i * 1) + ((i + 1) * Height));
            }
            else if (global.MenuCreated == 'Jobs') and (InstanceNumber == 2)
            {
                if (Options[i + TopOption] == noone)
                {
                    draw_text(global.SurvivalMenuX - LeftOffset, (global.SurvivalMenuY - FullHeight) + ((i * Height) + (Height / 2) + (i * 1)), 'CLEAR');
                }
                else
                {
                    draw_set_font(global.SmallFont);
                    draw_set_halign(fa_center);
                    draw_text_transformed(global.SurvivalMenuX - LeftOffset + 40, (global.SurvivalMenuY - FullHeight) + ((i * Height) + (Height / 2) - 10 + (i * 1)), string(Options[i + TopOption].Name), 2, 2, 0);
                    draw_set_font(global.Font);
                    scr_DrawState(global.SurvivalMenuX - LeftOffset + 40, (global.SurvivalMenuY - FullHeight) + ((i * Height) + (Height / 2) + 20 + (i * 1)), Options[i + TopOption]);
                    draw_sprite_ext(Options[i + TopOption].SurvivorSprite, 0, global.SurvivalMenuX - LeftOffset - Width + 40, (global.SurvivalMenuY - FullHeight) + ((i * Height) + (Height / 2) + (i * 1)), 2, 2, 0, c_white, 1);
                    draw_line(global.SurvivalMenuX - LeftOffset - Width + 80, (global.SurvivalMenuY - FullHeight) + (i * Height), global.SurvivalMenuX - LeftOffset - Width + 80, (global.SurvivalMenuY - FullHeight) + (i * 1) + ((i + 1) * Height));
                }
            }
        }
        else
        {
            break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
