<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Wood = 100000;
Medicine = 100000;
Stone = 100000;
Food = 100000;
Shops = 100000;
Guns = 100000;
Power = 100000;

ClosestWoods = 0;
ClosestMine = 0;
ClosestFarm = 0;
ClosestShops = 0;
ClosestGuns = 0;
ClosestPower = 0;
ClosestHospital = 0;

Dust = 0;
CookedFood = 0;
BuildingMaterial = 100000;
Ammo = 100000;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_UpdatePower();
Ammo += scr_UpdateAmmo();

alarm[1] = 750;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var DustChange = 10 - instance_number(obj_Cupboard);
DustChange = clamp(DustChange, 1, 10);
Dust += DustChange;
if (Dust &gt; 50)
{
    Dust = 50;
}

var RottenFood = scr_UpdateFood();
Food -= RottenFood;
if (Food &lt; 0)
{
    Food = 0;
}
CookedFood -= floor(RottenFood / 2);
if (CookedFood &lt; 0)
{
    CookedFood = 0;
}

alarm[0] = 18000;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (Power &lt;= 0)
{
    Power = 0;
    scr_StopPower();
}

if (BuildingMaterial &lt; 0)
{
    BuildingMaterial = 0;
}

if (Medicine &lt; 0)
{
    Medicine = 0;
    for (var i = 0; i &lt; global.Survivors; i++)
    {
        with (global.SurvivorInstances[i])
        {   
            if (Assignment == 'obj_HealingStation')
            {
                Assignment = 'Nothing';
                AssignedObject = noone;
            }
            if (State == scr_Doctoring)
            {
                State = scr_SIdle;
            }
        }
    }
}

if (Wood &lt; 0)
{
    Wood = 0;
}

if (Stone &lt; 0)
{
    Stone = 0;
}

if (Food &lt; 0)
{
    Food = 0;
    for (var i = 0; i &lt; global.Survivors; i++)
    {
        with (global.SurvivorInstances[i])
        {   
            if (Assignment == 'obj_Cooker')
            {
                Assignment = 'Nothing';
                AssignedObject = noone;
            }
            if (State == scr_Cooking)
            {
                State = scr_SIdle;
            }
        }
    }
}

if (Shops &lt; 0)
{
    Shops = 0;
}

if (Guns &lt; 0)
{
    Guns = 0;
}

if (Ammo &lt; 0)
{
    Ammo = 0;
    for (var i = 0; i &lt; global.Survivors; i++)
    {
        with (global.SurvivorInstances[i])
        {   
            if (Assignment == 'obj_SniperNest')
            {
                Assignment = 'Nothing';
                AssignedObject = noone;
            }
            if (State == scr_Sniping)
            {
                State = scr_SIdle;
            }
        }
    }
}

if (Dust &lt; 0)
{
    Dust = 0;
}

if (CookedFood &lt; 0)
{
    CookedFood = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !(instance_exists(obj_Score)) and !(global.SurviveMenu)
{
    var ResourceSprite, XPos, YPos;
    scr_DrawRectangle(1760, 70, 1800, 499, 1);
    draw_set_colour(c_black);
    draw_line(1760, 26, 1760, 489);
    for (var i = 0; i &lt; 7; i++)
    {
        switch (i)
        {
            case 0:
            {
                ResourceSprite = spr_Wood;
                XPos = 1716;
                YPos = 26 + (i * 66) + 33;
                var ResourceAmount = scr_GetResourceText(Wood);
                break;
            }
            
            case 1:
            {
                ResourceSprite = spr_MiningMaterial;
                XPos = 1714;
                YPos = 26 + (i * 66) + 27;
                var ResourceAmount = scr_GetResourceText(Stone);
                break;
            }
            
            case 2:
            {
                ResourceSprite = spr_Food;
                XPos = 1716;
                YPos = 26 + (i * 66) + 33;
                var ResourceAmount = scr_GetResourceText(Food);
                break;
            }
            
            case 3:
            {
                ResourceSprite = spr_Shops;
                XPos = 1716;
                YPos = 26 + (i * 66) + 38;
                var ResourceAmount = scr_GetResourceText(Shops);
                break;
            }
            
            case 4:
            {
                ResourceSprite = spr_Guns;
                XPos = 1716;
                YPos = 26 + (i * 66) + 33;
                var ResourceAmount = scr_GetResourceText(Guns);
                break;
            }
            
            case 5:
            {
                ResourceSprite = spr_Power;
                XPos = 1717;
                YPos = 26 + (i * 66) + 35;
                var ResourceAmount = scr_GetResourceText(Power);
                break;
            }
            
            case 6:
            {
                ResourceSprite = spr_Medicine;
                XPos = 1718;
                YPos = 26 + (i * 66) + 35;
                var ResourceAmount = scr_GetResourceText(Medicine);
                break;
            }
        }
        draw_set_halign(fa_right);
        draw_set_valign(fa_middle);
        draw_set_font(global.SmallFont);
        draw_text_transformed(1875, 26 + (i * 66) + 35, ResourceAmount, 2, 2, 0);
        draw_rectangle(1672, 26 + (i * 66), 1889, 26 + ((i + 1) * 66), true);
        draw_sprite_ext(ResourceSprite, 0, XPos, YPos, 2, 2, 0, c_white, 1);
    }
}
else if (instance_exists(obj_Score))
{
    var ResourceSprite, XPos, YPos;
    scr_DrawRectangle(1760, 310, 1800, 673, 1);
    draw_set_colour(c_black);
    draw_line(1760, 266, 1760, 673);
    for (var i = 0; i &lt; 6; i++)
    {
        switch (i)
        {
            case 0:
            {
                ResourceSprite = spr_BuildingMaterial;
                XPos = 1716;
                YPos = 266 + (i * 66) + 33;
                var ResourceAmount = scr_GetResourceText(BuildingMaterial);
                break;
            }
            
            case 1:
            {
                ResourceSprite = spr_Food;
                XPos = 1714;
                YPos = 266 + (i * 66) + 27;
                var ResourceAmount = scr_GetResourceText(Food);
                break;
            }
            
            case 2:
            {
                ResourceSprite = spr_CookedFood;
                XPos = 1714;
                YPos = 266 + (i * 66) + 27;
                var ResourceAmount = scr_GetResourceText(CookedFood);
                break;
            }
            
            case 3:
            {
                ResourceSprite = spr_Ammo;
                XPos = 1716;
                YPos = 266 + (i * 66) + 33;
                var ResourceAmount = scr_GetResourceText(Ammo);
                break;
            }
            
            case 4:
            {
                ResourceSprite = spr_Power;
                XPos = 1716;
                YPos = 266 + (i * 66) + 38;
                var ResourceAmount = scr_GetResourceText(Power);
                break;
            }
            
            case 5:
            {
                ResourceSprite = spr_Medicine;
                XPos = 1716;
                YPos = 266 + (i * 66) + 33;
                var ResourceAmount = scr_GetResourceText(Medicine);
                break;
            }
        }
        draw_rectangle(1672, 266 + (i * 66), 1889, 266 + ((i + 1) * 66), true);
        draw_sprite_ext(ResourceSprite, 0, XPos, YPos, 2, 2, 0, c_white, 1);
        draw_set_halign(fa_right);
        draw_set_font(global.SmallFont);
        draw_text_transformed(1875, 266 + (i * 66) + 35, ResourceAmount, 2, 2, 0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
