<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>BuildSelection = 0;
SpriteXScale = 1;
SpriteYScale = 1;
DrawSprite = 0;
ImageIndex = 0;
Cost = 0;
CostType = '';
BuildObject = 0;
BuildingCancelled = false;
Rotation = 0;
SquareType = '';
Placement = '';
global.Building = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.Building) and !(BuildingCancelled) and !(instance_exists(obj_Builder))
{
    XScale = ((((mouse_x div 16) * 16) + 8 - StartX) div 16) + 1;
    YScale = ((((mouse_y div 16) * 16) + 8 - StartY) div 16) + 1;
    TempX = StartX;
    TempY = StartY;
    if (XScale &lt;= 0)
    {
        XScale -= 2;
    }
    if (YScale &lt;= 0)
    {
        YScale -= 2;
    }
    
    switch (SquareType)
    {
        case ('line'):
        {
            if (abs(XScale) &gt; abs(YScale))
            {
                if (YScale &lt;= 0)
                {
                    YScale = -1;
                }
                else
                {
                    YScale = 1;
                }
            }
            else 
            {
                if (XScale &lt;= 0)
                {
                    XScale = -1;
                }
                else
                {
                    XScale = 1;
                }
            }
            break;
        }
        
        case ('single'):
        {
            XScale = 1;
            YScale = 1;
            TempX = StartX;
            TempY = StartY;
            break;
        }
        
        case ('double'):
        {
            XScale = 2;
            YScale = 2;
            TempX = StartX;
            TempY = StartY;
            break;
        }
        
        case ('two'):
        {
            if (Rotation == 0)
            {
                XScale = 2;
                YScale = 1;
                TempX = StartX;
                TempY = StartY;
            }
            else if (Rotation == 2)
            {
                XScale = -2;
                YScale = 1;
                TempX = StartX + 16;
                TempY = StartY;
            }
            else
            {
                XScale = 1;
                YScale = 2;
                TempX = StartX;
                TempY = StartY;
            }
            break;
        }
    }
}

switch (BuildSelection)
{
    case spr_BulletPrinter:
    case spr_Destroy:
    case spr_Floor:
    case spr_SniperNest:
    case spr_Generator:
    case spr_SportsEquipment:
    case spr_Table:
    {
        ImageIndex = 0;
        SpriteXScale = 1;
        SpriteYScale = 1;
        DrawSprite = BuildSelection;
        break;
    }
    case spr_Garden:
    case spr_PerimeterFence:
    case spr_PerimeterWall:
    case spr_WoodWall:
    case spr_BrickWall:
    case spr_IronDoor:
    case spr_IronGate:
    case spr_WoodDoor:
    case spr_FenceGate:
    case spr_Window:
    {
        DrawSprite = BuildSelection;
        SpriteXScale = 1;
        SpriteYScale = 1;
        ImageIndex = 11;
        break;
    }
    
    case spr_InsideLight:
    case spr_GardenLight:
    {
        DrawSprite = BuildSelection;
        SpriteXScale = 1;
        SpriteYScale = 1;
        ImageIndex = 1;
        break;
    }
    
    case spr_WeaponRack:
    case spr_Toilet:
    case spr_Cupboard:
    case spr_Turret:
    case spr_Chair:
    {
        DrawSprite = BuildSelection;
        SpriteYScale = 1;
        switch (Rotation)
        {
            case 0:
            {
                ImageIndex = 0;
                SpriteXScale = 1;
                break;
            }
            
            case 1:
            {
                ImageIndex = 1;
                SpriteXScale = 1;
                break;
            }
            
            case 2:
            {
                ImageIndex = 2;
                SpriteXScale = 1;
                break;
            }
            
            case 3:
            {
                ImageIndex = 1;
                SpriteXScale = -1;
                break;
            }
        }
        break;
    }
    
    case spr_HealingStation:
    case spr_CleaningStation:
    {
        DrawSprite = BuildSelection;
        SpriteYScale = 1;
        switch (Rotation)
        {
            case 0:
            {
                ImageIndex = 0;
                SpriteXScale = -1;
                break;
            }
            
            case 1:
            {
                ImageIndex = 1;
                SpriteXScale = 1;
                break;
            }
            
            case 2:
            {
                ImageIndex = 0;
                SpriteXScale = 1;
                break;
            }
            
            case 3:
            {
                ImageIndex = 2;
                SpriteXScale = 1;
                break;
            }
        }
        break;
    }
    
    case spr_BedFront:
    {
        SpriteYScale = 1;
        switch (Rotation)
        {
            case 0:
            {
                DrawSprite = spr_BedSideways;
                SpriteXScale = 1;
                break;
            }
            
            case 1:
            {
                DrawSprite = spr_BedBack;
                SpriteXScale = 1;
                break;
            }
            
            case 2:
            {
                DrawSprite = spr_BedSideways;
                SpriteXScale = -1;
                break;
            }
            
            case 3:
            {
                DrawSprite = spr_BedFront;
                SpriteXScale = 1;
                break;
            }
        }
        break;
    }
    
    case spr_CouchFront:
    {
        SpriteYScale = 1;
        switch (Rotation)
        {
            case 0:
            {
                DrawSprite = spr_CouchFront;
                SpriteXScale = 1;
                break;
            }
            
            case 1:
            {
                DrawSprite = spr_CouchSideways;
                SpriteXScale = 1;
                break;
            }
            
            case 2:
            {
                DrawSprite = spr_CouchBack;
                SpriteXScale = 1;
                break;
            }
            
            case 3:
            {
                DrawSprite = spr_CouchSideways;
                SpriteXScale = -1;
                break;
            }
        }
        break;
    }
    
    case spr_SpotlightFront:
    {
        ImageIndex = 0;
        SpriteYScale = 1;
        switch (Rotation)
        {
            case 0:
            {
                SpriteXScale = 1;
                DrawSprite = spr_SpotlightFront;
                break;
            }
            
            case 1:
            {
                SpriteXScale = 1;
                DrawSprite = spr_SpotlightSideways;
                break;
            }
            
            case 2:
            {
                SpriteXScale = 1;
                DrawSprite = spr_SpotlightBack;
                break;
            }
            
            case 3:
            {
                SpriteXScale = -1;
                DrawSprite = spr_SpotlightSideways;
                break;
            }
        }
        break;
    }
    case spr_ShowerFront:
    {
        ImageIndex = 0;
        SpriteYScale = 1;
        switch (Rotation)
        {
            case 0:
            {
                SpriteXScale = 1;
                DrawSprite = spr_ShowerFront;
                break;
            }
            
            case 1:
            {
                SpriteXScale = 1;
                DrawSprite = spr_ShowerSideways;
                break;
            }
            
            case 2:
            {
                SpriteXScale = 1;
                DrawSprite = spr_ShowerBack;
                break;
            }
            
            case 3:
            {
                SpriteXScale = -1;
                DrawSprite = spr_ShowerSideways;
                break;
            }
        }
        break;
    }
    case spr_FridgeFront:
    {
        ImageIndex = 0;
        SpriteYScale = 1;
        switch (Rotation)
        {
            case 0:
            {
                SpriteXScale = 1;
                DrawSprite = spr_FridgeFront;
                break;
            }
            
            case 1:
            {
                SpriteXScale = 1;
                DrawSprite = spr_FridgeSideways;
                break;
            }
            
            case 2:
            {
                SpriteXScale = 1;
                DrawSprite = spr_FridgeBack;
                break;
            }
            
            case 3:
            {
                SpriteXScale = -1;
                DrawSprite = spr_FridgeSideways;
                break;
            }
        }
        break;
    }
    case spr_WashingMachineFront:
    {
        ImageIndex = 0;
        SpriteYScale = 1;
        switch (Rotation)
        {
            case 0:
            {
                SpriteXScale = 1;
                DrawSprite = spr_WashingMachineFront;
                break;
            }
            
            case 1:
            {
                SpriteXScale = 1;
                DrawSprite = spr_WashingMachineSideways;
                break;
            }
            
            case 2:
            {
                SpriteXScale = 1;
                DrawSprite = spr_WashingMachineBack;
                break;
            }
            
            case 3:
            {
                SpriteXScale = -1;
                DrawSprite = spr_WashingMachineSideways;
                break;
            }
        }
        break;
    }
    case spr_CookerFront:
    {
        ImageIndex = 0;
        SpriteYScale = 1;
        switch (Rotation)
        {
            case 0:
            {
                SpriteXScale = 1;
                DrawSprite = spr_CookerFront;
                break;
            }
            
            case 1:
            {
                SpriteXScale = 1;
                DrawSprite = spr_CookerSideways;
                break;
            }
            
            case 2:
            {
                SpriteXScale = 1;
                DrawSprite = spr_CookerBack;
                break;
            }
            
            case 3:
            {
                SpriteXScale = -1;
                DrawSprite = spr_CookerSideways;
                break;
            }
        }
        break;
    }
    case spr_TVSideways:
    {
        ImageIndex = 0;
        SpriteYScale = 1;
        switch (Rotation)
        {
            case 0:
            {
                SpriteXScale = 1;
                DrawSprite = spr_TVFront;
                break;
            }
            
            case 1:
            {
                SpriteXScale = 1;
                DrawSprite = spr_TVSideways;
                break;
            }
            
            case 2:
            {
                SpriteXScale = 1;
                DrawSprite = spr_TVBack;
                break;
            }
            
            case 3:
            {
                SpriteXScale = -1;
                DrawSprite = spr_TVSideways;
                break;
            }
        }
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !(BuildingCancelled)
{
    EndX = ((mouse_x div 16) * 16) + 8;
    EndY = ((mouse_y div 16) * 16) + 8;
    switch (SquareType)
    {
        case ('line'):
        {
            if (XScale &gt;= -1) and (XScale &lt;= 1)
            {
                EndX = StartX;
            }
            if (YScale &gt;= -1) and (YScale &lt;= 1)
            {
                EndY = StartY;
            }
            break;
        }
        
        case ('single'):
        {
            EndX = StartX;
            EndY = StartY;
            break;
        }
        
        case ('double'):
        {
            EndX = StartX + 16;
            EndY = StartY + 16;
            break;
        }
        
        case ('two'):
        {
            if (Rotation == 0)
            {
                EndX = StartX + 16;
                EndY = StartY;
            }
            else if (Rotation == 1)
            {
                EndX = StartX;
                EndY = StartY + 16;
            }
            else if (Rotation == 2)
            {
                EndX = StartX - 16;
                EndY = StartY;
            }
            else if (Rotation == 3)
            {
                EndX = StartX;
                EndY = StartY + 16;
            }
            break;
        }
    }

    if !(collision_point(mouse_x, mouse_y, obj_NoBuildZone, 0, false)) and (mouse_x &gt; 128) and (mouse_x &lt; 1792) and (mouse_y &gt; 128) and (mouse_y &lt; 960)
    {
        var BuilderInstance = instance_create(StartX, StartY, obj_Builder);
        with (BuilderInstance)
        {
            Cost = other.Cost;
            CostType = other.CostType;
            EndX = other.EndX;
            EndY = other.EndY;
            Object = other.BuildObject;
            Rotation = other.Rotation;
            Placement = other.Placement;
        }
    }
    else
    {
        global.Building = false;
    }
}
else
{
    global.Building = false;
}
BuildingCancelled = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !(global.GuiHover) and !(global.MenuCreated) and !(global.SurviveMenu)
{
    StartX = ((mouse_x div 16) * 16) + 8;
    StartY = ((mouse_y div 16) * 16) + 8;

    if !(collision_point(mouse_x, mouse_y, obj_NoBuildZone, 0, false)) and !(global.Building) and (BuildSelection != 0)
    {
        global.Building = true;
    }
    else
    {
        BuildingCancelled = true;
    }
}
else
{
    BuildingCancelled = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (mouse_check_button_pressed(mb_right))
{
    BuildingCancelled = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (BuildSelection != 0) and !(global.Building) and !(global.MenuCreated) and !(global.SurviveMenu) and !(collision_point(mouse_x, mouse_y, obj_NoBuildZone, 0, false))
{
    draw_sprite_ext(DrawSprite, ImageIndex, ((mouse_x div 16) * 16) + 8, ((mouse_y div 16) * 16) + 8, SpriteXScale, SpriteYScale, 0, c_white, 1);
}

if (global.Building) and !(BuildingCancelled) and !(instance_exists(obj_Builder))
{
    for (var i = 0; i &lt; abs(XScale); i++)
    {
        for (var j = 0; j &lt; abs(YScale); j++)
        {
            draw_sprite(spr_BuildSquare, 0, TempX + (i * sign(XScale)) * 16, TempY + (j * sign(YScale)) * 16);
        }
    }
    draw_text(mouse_x + 32, mouse_y + 32, string(abs(XScale)) + 'x' + string(abs(YScale)));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (Rotation == 0)
{
    Rotation = 3;
}
else
{
    Rotation--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
