<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Height = 32;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (point_in_rectangle(device_mouse_x_to_gui(0), device_mouse_y_to_gui(0), global.SurvivalMenuX - LeftOffset, global.SurvivalMenuY + 30 - FullHeight, global.SurvivalMenuX - LeftOffset + (Width * 2), global.SurvivalMenuY + 30 + FullHeight))
{
    global.TimeHover = true;
}
else
{
    global.TimeHover = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.TimeHover)
{
    Selection = ((device_mouse_y_to_gui(0) - (global.SurvivalMenuY + 30 - FullHeight)) div Height);
    if (Selection != 0)
    {
        with (Object)
        {
            if (string_char_at(Times, other.Selection) == '1')
            {
                var Temp = string_copy(Times, 1, other.Selection - 1) + '0' + string_copy(Times, other.Selection + 1, string_length(Times) - other.Selection);
                Times = Temp;
            }
            else
            {
                var Temp = string_copy(Times, 1, other.Selection - 1) + '1' + string_copy(Times, other.Selection + 1, string_length(Times) - other.Selection);
                Times = Temp;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_colour(c_gray)
draw_rectangle(global.SurvivalMenuX - LeftOffset, global.SurvivalMenuY + 30 - FullHeight, global.SurvivalMenuX - LeftOffset + (Width * 2), global.SurvivalMenuY + 30 - FullHeight + Height, false);
draw_set_font(global.Font);
draw_set_halign(fa_center);
draw_text(global.SurvivalMenuX - LeftOffset + Width, global.SurvivalMenuY + 30 - FullHeight + 15, 'TIMETABLE');

for (var i = 1; i &lt; 25; i++)
{
    if (string_char_at(Object.Times, i) == '1')
    {
        draw_set_colour(c_yellow);
    }
    else
    {
        draw_set_colour(c_white);
    }
    
    if (point_in_rectangle(device_mouse_x_to_gui(0), device_mouse_y_to_gui(0), global.SurvivalMenuX - LeftOffset, global.SurvivalMenuY + 30 - FullHeight + (i * Height), global.SurvivalMenuX - LeftOffset + (Width * 2), global.SurvivalMenuY + 30 - FullHeight + ((i + 1) * Height)))
    {
        draw_set_colour(c_red);
    }
    
    draw_rectangle(global.SurvivalMenuX - LeftOffset, global.SurvivalMenuY + 30 - FullHeight + (i * Height), global.SurvivalMenuX - LeftOffset + (Width * 2), global.SurvivalMenuY + 30 - FullHeight + ((i + 1) * Height), false);
    draw_set_colour(c_black);
    draw_rectangle(global.SurvivalMenuX - LeftOffset, global.SurvivalMenuY + 30 - FullHeight + (i * Height), global.SurvivalMenuX - LeftOffset + (Width * 2), global.SurvivalMenuY + 30 - FullHeight + ((i + 1) * Height), true);
    draw_set_halign(fa_center);
    draw_set_font(global.SmallFont);
    draw_text_transformed(global.SurvivalMenuX - LeftOffset + Width, global.SurvivalMenuY + 30 - FullHeight + (i * Height) + 15, string(i - 1) + ' - ' + string(i), 2, 2, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
