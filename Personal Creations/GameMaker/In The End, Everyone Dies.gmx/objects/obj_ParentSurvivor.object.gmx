<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-7</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_Doctor</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>PreviousState = 0;
SurvivorSprite = spr_Doctor;
State = scr_SIdle;
PathCreated = false;
StopMoving = false;
StartX = x;
StartY = y;
TempX = 0;
TempY = 0;
Selected = false;
Shooting = false;
AssignedObject = noone;
Counter = 0;
HealingStation = noone;
SniperInstance = noone;
Toilet = noone;
Shower = noone;
Bed = noone;

Speed = 1;
Reloading = false;
Profession = '';
Weapon = 'Fists';

Location = 'Plot';
SuccessChance = 0;
TimeLeft = 0;

Distracted = false;
Health = 100;
DepressionLevel = 0;
Cleanliness = 100;
Clothes = 100;
Tiredness = 100;
Comfort =  0;
Bathroom = 0;
Hunger = 0;
Protection = 0;
alarm[3] = 750;
Assignment = 'Nothing';

alarm[0] = 1;
alarm[6] = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (State != scr_Sniping)
{
    var ZombieFound = scr_FindClosestZombie(true);
    if (ZombieFound != noone)
    {
        if (point_distance(x, y, ZombieFound.x, ZombieFound.y) &lt;= 700)
        {
            Counter = 0;
            State = scr_Fighting;
        }
    }
    alarm[6] = 30;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Reloading = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var FailureTest = irandom(99);

if (FailureTest &gt; SuccessChance)
{
    State = scr_Dead(self);
}
else
{
    switch (Location)
    {
        case 'Hospital':
        {
            obj_Resources.Medicine += 50;
            break;
        }
        
        case 'Farm':
        {
            obj_Resources.Food += 50;
            break;
        }
        
        case 'Shops':
        {
            obj_Resources.BuildingMaterial += 50;
            break;
        }
        
        case 'Mine':
        {
            obj_Resources.BuildingMaterial += 50;
            break;
        }
        
        case 'Forest':
        {
            obj_Resources.BuildingMaterial += 50;
            break;
        }
        
        case 'Gun Shop':
        {
            obj_Resources.Ammo += 50;
            break;
        }
        
        case 'Power Station':
        {
            obj_Resources.Power += 50;
            break;
        }
    }
    State = scr_SIdle;
    Location = 'Plot';
    Assignment = 'Nothing';
    SuccessChance = 0;
    alarm[3] = TimeLeft;
    Hunger += 10;
    Bathroom += 10;
    Tiredness -= 10;
    if (Tiredness &lt; 0)
    {
        Tiredness = 0;
        State = scr_Sleeping;
    }
    Clothes -=  10;
    if (Clothes &lt; 0)
    {
        Clothes = 0;
    }
    Cleanliness -= 10;
    if (Cleanliness &lt; 0)
    {
        Cleanliness = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (State != scr_Scavenge)
{
    DepressionLevel -= scr_DepressionUpdate(obj_TV);
    DepressionLevel -= Comfort;

    Hunger++;
    if (Hunger &gt; 100)
    {
        Health -= (Hunger - 100);
        DepressionLevel++;
    }
    if (Hunger &gt; 75) and (State != scr_Healing) and (State != scr_Sleeping) and (State != scr_Fighting)
    {
        State = scr_Hungry;
    }
    if (Hunger == 0) and (State == scr_Hungry)
    {
        scr_GoBackToAssignedState();
    }

    Tiredness--;
    Tiredness = clamp(Tiredness, 0, 100);
    if (Tiredness == 0)
    {
        if (State == scr_Healing)
        {
            HealingStation.Used = false;
            HealingStation = noone;
        }
        if (State == scr_Showering)
        {
            Shower.Used = false;
            Shower = noone;
        }
        if (State = scr_Toilet)
        {
            Toilet.Used = false;
            Toilet = noone;
        }
        State = scr_Sleeping;
    }
    else if (Tiredness &lt; 25) and (State != scr_Healing) and (State != scr_Scavenge) and (State != scr_Fighting)
    {
        State = scr_Sleeping;
    }
    else if (Tiredness == 100) and (State == scr_Sleeping)
    {
        scr_GoBackToAssignedState();
    }

    Bathroom++;
    if (Bathroom &gt;= 100)
    {
        Cleanliness -= 25;
        Clothes -= 25;
        Bathroom = 0;
    }
    else if (Bathroom &gt; 75)
    {
        if (State != scr_Healing) and (State != scr_Fighting) and (State != scr_Sleeping) and (instance_exists(obj_Toilet))
        {
            State = scr_Toilet;
        }
    }
    else if (Bathroom == 0) and (State == scr_Toilet)
    {
        scr_GoBackToAssignedState();
    }
    
    Clothes--;
    Clothes = clamp(Clothes, 0, 100);
    if (Clothes == 0)
    {
        DepressionLevel++;
    }

    Cleanliness -= obj_Resources.Dust;
    if (Cleanliness &lt; 0)
    {
        Cleanliness = 0;
    }
    if (Cleanliness &lt; 25)
    {
        if (State != scr_Healing) and (instance_exists(obj_Shower)) and (State != scr_Sleeping) and (State != scr_Fighting)
        {
            State = scr_Showering;
        }
        DepressionLevel++;
    }
    else if (Cleanliness == 100) and (State == scr_Showering)
    {
        scr_GoBackToAssignedState();
    }
    
    if (Protection &lt; DepressionLevel)
    {
        var SuicideTest = irandom(DepressionLevel);
        if (SuicideTest &gt; Protection)
        {
            scr_Dead(self);
        }
    }

    alarm[3] = 750;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.SurvivorSelected != noone)
{
    with (global.SurvivorSelected)
    {
        Selected = false;
    }
}
global.SurvivorSelected = self;
Selected = true;

scr_DestroySurvivalMenu();
global.MenuCreated = 'Survivor';
instance_create(0, 0, obj_SurvivalMenu);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>StopMoving = false;
Distracted = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (Profession)
{
    case ('DOCTOR'):
    {
        SurvivorSprite = spr_Doctor;
        break;
    }
    case ('MILITARY'):
    {
        SurvivorSprite = spr_Military;
        break;
    }
    case ('CHEF'):
    {
        SurvivorSprite = spr_Chef;
        break;
    }
    case ('GARDENER'):
    {
        SurvivorSprite = spr_Gardener;
        break;
    }
    case ('JANITOR'):
    {
        SurvivorSprite = spr_Janitor;
        break;
    }
    case ('SNIPER'):
    {
        SurvivorSprite = spr_Sniper;
        break;
    }
    case ('MAID'):
    {
        SurvivorSprite = spr_Maid;
        break;
    }
    case ('MARTIAL ARTIST'):
    {
        SurvivorSprite = spr_MartialArtist;
        break;
    }
    case ('ENGINEER'):
    {
        SurvivorSprite = spr_Engineer;
        break;
    }
    case ('HUNTER'):
    {
        SurvivorSprite = spr_Hunter;
        break;
    }
    case ('THIEF'):
    {
        SurvivorSprite = spr_Thief;
        break;
    }
    case ('SURVIVALIST'):
    {
        SurvivorSprite = spr_Survivalist;
        break;
    }
}

Protection = scr_GetProtectedness();
Comfort = scr_GetComfort();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>script_execute(State);
if (Health &lt;= 0)
{
    scr_Dead(self);
    if (Weapon != 'Fists')
    {
        with (obj_Weapons)
        {
            WeaponList[TotalWeapons] = other.Weapon;
            TotalWeapons++;
        }
    }
}
if (DepressionLevel &lt; 0)
{
    DepressionLevel = 0;
}

if (State != scr_Sniping) and !(alarm[6])
{
    alarm[6] = 30;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (Selected) and (Tiredness != 0) and (State != scr_Scavenge)
{
    Distracted = true;
    if (PathCreated)
    {
        path_end();
        var ValidPath = mp_grid_path(global.SurvivorGrid, Path, x, y, mouse_x, mouse_y, true);
        if (ValidPath)
        {
            path_start(Path, Speed, path_action_stop, true);
            TempX = mouse_x;
            TempY = mouse_y;
        }
        else
        {
            if (TempX != 0)
            {
                StartX = x;
                StartY = y;
                TempX = 0;
                TempY = 0;
            }
            PathCreated = false;
            StopMoving = true;
            alarm[1] = 1;
            path_delete(Path);
        }
    }
    else
    {
        Path = path_add();
        var ValidPath = mp_grid_path(global.SurvivorGrid, Path, x, y, mouse_x, mouse_y, true);
        if (ValidPath)
        {
            path_start(Path, Speed, path_action_stop, true);
            PathCreated = true;
            StopMoving = false;
            TempX = mouse_x;
            TempY = mouse_y;
        }
        else
        {
            PathCreated = false;
            StopMoving = true;
            alarm[1] = 1;
            path_delete(Path);
        }       
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (Selected) and (scr_CheckHovering())
{
    Selected = false;
    global.SurvivorSelected = noone;
    scr_DestroySurvivalMenu();
    global.MenuCreated = '';
}
if (Selected) and (global.BackHover)
{
    Selected = false;
    global.SurvivorSelected = noone;
    scr_DestroySurvivalMenu();
    global.MenuCreated = 'Survivors';
    instance_create(0, 0, obj_SurvivalMenu);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (scr_CheckHovering()) and (State != scr_Scavenge)
{
    alarm[2] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (State != scr_Scavenge)
{
    if (Selected)
    {
        draw_sprite_ext(SurvivorSprite, 0, x, y, 1, 1, 0, c_red, 1);
        if (path_exists(Path))
        {
            draw_path(Path, x, y, true);
        }
    }
    else
    {
        draw_sprite_ext(SurvivorSprite, 0, x, y, 1, 1, 0, c_white, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
