<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Hover = false;
Width = 0;
Height = 0;
XPos = 0;
YPos = 0;
Sprite = 0;
Main = false;
MenuCreated = false;
TotalExtraSpace = 0;
TotalMoreSpace = 0;
SquareType = '';
global.MenuCreated = false;
global.GuiHover = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (Text == 'BED')
{
    if (point_in_rectangle(device_mouse_x_to_gui(0), device_mouse_y_to_gui(0), XPos - (Width / 2), YPos - (Height / 2) - 32, XPos + (Width / 2), YPos + (Height / 2) + 32))
    {
        global.GuiHover = true;
        Hover = true;
    }
    else
    {
        scr_CheckGuiHover();
        Hover = false;
    }
}
else if (Text == 'COUCH')
{
    if (point_in_rectangle(device_mouse_x_to_gui(0), device_mouse_y_to_gui(0), XPos - (Width / 2) - 32, YPos - (Height / 2), XPos + (Width / 2) + 32, YPos + (Height / 2)))
    {
        global.GuiHover = true;
        Hover = true;
    }
    else
    {
        scr_CheckGuiHover();
        Hover = false;
    }
}
else if (Text == 'SNIPER NEST') or (Text == 'GENERATOR') or (Text == 'TABLE')
{
    if (point_in_rectangle(device_mouse_x_to_gui(0), device_mouse_y_to_gui(0), XPos - (Width / 2) - 32, YPos - (Height / 2) - 32, XPos + (Width / 2) + 32, YPos + (Height / 2) + 32))
    {
        global.GuiHover = true;
        Hover = true;
    }
    else
    {
        scr_CheckGuiHover();
        Hover = false;
    }
}
else
{
    if (point_in_rectangle(device_mouse_x_to_gui(0), device_mouse_y_to_gui(0), XPos - (Width / 2), YPos - (Height / 2), XPos + (Width / 2), YPos + (Height / 2)))
    {
        global.GuiHover = true;
        Hover = true;
    }
    else
    {
        scr_CheckGuiHover();
        Hover = false;
    }
}

if (MenuCreated) and !(point_in_rectangle(device_mouse_x_to_gui(0), device_mouse_y_to_gui(0), XPos - Width - 100, (YPos - (Width / 2) - 55 - TotalExtraSpace - TotalMoreSpace - (NumberObjects * 32) - (NumberObjects * 75)), XPos + Width + 100, YPos + (Height / 2)))
{
    MenuCreated = false;
    global.MenuCreated = false;
    scr_DestroyObjectMenu(Objects, NumberObjects);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (Hover) and !(global.SurviveMenu)
{
    if (Main) and !(MenuCreated)
    {
        scr_CreateObjectMenu(Objects, NumberObjects, XPos - (Width / 2), YPos - (Width / 2) - 20);
        MenuCreated = true;
        global.MenuCreated = true;
    }
    else if (Main) and (MenuCreated)
    {
        MenuCreated = false;
        global.MenuCreated = false;
        scr_DestroyObjectMenu(Objects, NumberObjects);
    }
    else
    {
        if (Text == '') and !(instance_exists(obj_Builder))
        {
            global.SurviveMenu = true;
            var Valid = scr_CheckValidPlot();
            var Instance = instance_create(0, 0, obj_SurvivalInfo);
            with (Instance)
            {
                ValidPlot = Valid;
            }
        }
        else
        {
            with (instance_nearest(0, 0, obj_ObjectSelection))
            {
                if (other.Text == 'NOTHING')
                {
                    BuildSelection = 0;
                }
                else if (other.Text == 'DESTROY')
                {
                    BuildSelection = spr_Destroy;
                }
                else
                {
                    BuildSelection = other.Sprite;
                }
                SquareType = other.SquareType;
                Placement = other.Placement;
                BuildObject = other.Object;
                Cost = other.Cost;
                CostType = other.CostType;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !(global.SurviveMenu)
{

if (Hover) and !(Main) and (Text != 'NOTHING') and (Text != 'DESTROY') and (Text != '')
{
    var Up = device_mouse_y_to_gui(0) &gt; 540;
    var Right = device_mouse_x_to_gui(0) &lt; 960;
    if (Up)
    {
        var NewStartYPos = device_mouse_y_to_gui(0) - 400;
        var NewEndYPos = device_mouse_y_to_gui(0);
    }
    else
    {
        var NewStartYPos = device_mouse_y_to_gui(0) + 48;
        var NewEndYPos = device_mouse_y_to_gui(0) + 448;
    }
    if (Right)
    {
        var NewStartXPos = device_mouse_x_to_gui(0) + 173;
        var NewEndXPos = device_mouse_x_to_gui(0) + 448;
    }
    else
    {
        var NewStartXPos = device_mouse_x_to_gui(0) - 400;
        var NewEndXPos = device_mouse_x_to_gui(0) - 125;
    }
    scr_DrawRectangle(NewStartXPos, NewStartYPos, NewEndXPos, NewEndYPos, 1);
    
    var NewWidth = abs(NewStartXPos - NewEndXPos);
    var NewHeight = abs(NewStartYPos - NewEndYPos);
    
    draw_set_font(global.Font);
    draw_set_halign(fa_center);
    draw_set_valign(fa_top);
    draw_set_colour(c_black);
    draw_text(NewStartXPos + (NewWidth / 2), NewStartYPos - 10, Text);
    draw_set_font(global.SmallFont);
    draw_text_transformed(NewStartXPos + (NewWidth / 2), NewStartYPos + 50, Description, 2, 2, 0);

    if (Right)
    {
        scr_DrawRectangle(NewStartXPos + 33, NewEndYPos - 90, NewEndXPos - 33, NewEndYPos - 43, 2);
    }
    else
    {
        scr_DrawRectangle(NewStartXPos + 35, NewEndYPos - 90, NewEndXPos - 35, NewEndYPos - 43, 2);
    }
    
    switch (CostType)
    {
        case 'Wood':
        {
            draw_sprite_ext(spr_Wood, 0, NewStartXPos + 55, NewEndYPos - 98, 2, 2, 0, c_white, 1);
            break;
        }
        
        case 'Mine':
        {
            draw_sprite_ext(spr_MiningMaterial, 0, NewStartXPos + 51, NewEndYPos - 96, 2, 2, 0, c_white, 1);
            break;
        }
        
        case 'Medicine':
        {
            draw_sprite_ext(spr_Medicine, 0, NewStartXPos + 57, NewEndYPos - 96, 2, 2, 0, c_white, 1);
            break;
        }
        
        case 'Power':
        {
            draw_sprite_ext(spr_Power, 0, NewStartXPos + 56, NewEndYPos - 95, 2, 2, 0, c_white, 1);
            break;
        }
        
        case 'Guns':
        {
            draw_sprite_ext(spr_Guns, 0, NewStartXPos + 55, NewEndYPos - 98, 2, 2, 0, c_white, 1);
            break;
        }
        
        case 'Food':
        {
            draw_sprite_ext(spr_Food, 0, NewStartXPos + 55, NewEndYPos - 98, 2, 2, 0, c_white, 1);
            break;
        }
        
        case 'Decorations':
        {
            draw_sprite_ext(spr_Shops, 0, NewStartXPos + 55, NewEndYPos - 90, 2, 2, 0, c_white, 1);
            break;
        }
    }
    
    var Temp = Placement;
    if (Placement == 'OUTSIDEDOUBLE')
    {
        Temp = 'OUTSIDE';
    }
    else if (Placement == 'FLOORTWO') or (Placement == 'FLOORDOUBLE')
    {
        Temp = 'FLOOR';
    }

    draw_text_transformed(NewStartXPos - 13, NewEndYPos - 105, string(Cost), 2, 2, 0);
    draw_text_transformed(NewStartXPos + 205, NewEndYPos - 105, Temp, 2, 2, 0);
    
    draw_set_colour(c_black);
    draw_rectangle(NewStartXPos - 50, NewEndYPos - 130, NewStartXPos + 20, NewEndYPos - 60, true);
    draw_rectangle(NewStartXPos + 20, NewEndYPos - 130, NewStartXPos + 90, NewEndYPos - 60, true);
    draw_rectangle(NewStartXPos + 90, NewEndYPos - 130, NewEndXPos + 50, NewEndYPos - 60, true);
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="74">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (MenuCreated)
{
    scr_DrawRectangle(XPos - Width, (YPos - (Width / 2) - TotalExtraSpace - TotalMoreSpace - (NumberObjects * 32) - (NumberObjects * 75)), XPos + Width, YPos - (Height / 2), 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !(global.SurviveMenu)
{

if (Hover)
{
    if !(Main) and (Text != 'NOTHING') and (Text != 'DESTROY') and (Text != '')
    {
        if (Text == 'SNIPER NEST') or (Text == 'GENERATOR') or (Text == 'TABLE')
        {
            draw_sprite_ext(spr_BuildMenu, 1, XPos, YPos, 4, 4, 0, c_white, 1);
            draw_sprite_ext(Sprite, 0, XPos - 16, YPos - 16, 2, 2, 0, c_white, 1);
        }
        else if (Text == 'COUCH')
        {
            draw_sprite_ext(spr_WideBuildMenu, 1, XPos, YPos, 2, 2, 0, c_white, 1);
            draw_sprite_ext(Sprite, 0, XPos - 16, YPos, 2, 2, 0, c_white, 1);
        }
        else if (Text == 'BED')
        {
            draw_sprite_ext(spr_TallBuildMenu, 1, XPos, YPos, 2, 2, 0, c_white, 1);
            draw_sprite_ext(Sprite, 0, XPos, YPos - 16, 2, 2, 0, c_white, 1);
        }
        else
        {
            draw_sprite_ext(spr_BuildMenu, 1, XPos, YPos, 2, 2, 0, c_white, 1);
            draw_sprite_ext(Sprite, 0, XPos, YPos, 2, 2, 0, c_white, 1);
        }
    }
    else
    {
        draw_sprite_ext(Sprite, 1, XPos, YPos, 2, 2, 0, c_white, 1);
    }
}
else
{
    if !(Main) and (Text != 'NOTHING') and (Text != 'DESTROY') and (Text != '')
    {
        if (Text == 'SNIPER NEST') or (Text == 'GENERATOR') or (Text == 'TABLE')
        {
            draw_sprite_ext(spr_BuildMenu, 0, XPos, YPos, 4, 4, 0, c_white, 1);
            draw_sprite_ext(Sprite, 0, XPos - 16, YPos - 16, 2, 2, 0, c_white, 1);
        }
        else if (Text == 'COUCH')
        {
            draw_sprite_ext(spr_WideBuildMenu, 0, XPos, YPos, 2, 2, 0, c_white, 1);
            draw_sprite_ext(Sprite, 0, XPos - 16, YPos, 2, 2, 0, c_white, 1);
        }
        else if (Text == 'BED')
        {
            draw_sprite_ext(spr_TallBuildMenu, 0, XPos, YPos, 2, 2, 0, c_white, 1);
            draw_sprite_ext(Sprite, 0, XPos, YPos - 16, 2, 2, 0, c_white, 1);
        }
        else
        {
            draw_sprite_ext(spr_BuildMenu, 0, XPos, YPos, 2, 2, 0, c_white, 1);
            draw_sprite_ext(Sprite, 0, XPos, YPos, 2, 2, 0, c_white, 1);
        }
    }
    else
    {
        draw_sprite_ext(Sprite, 0, XPos, YPos, 2, 2, 0, c_white, 1);
    }
}


draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_colour(c_black);
if (Main) or (Text == 'NOTHING') or  (Text == 'DESTROY')
{
    draw_set_font(global.Font);
    draw_text(XPos, YPos + (Width / 2) + 13, Text);
}
else
{
    draw_set_font(global.SmallFont);
    if (Text == 'BED') or (Text == 'GENERATOR') or (Text == 'SNIPER NEST') or (Text == 'TABLE')
    {
        draw_text_transformed(XPos, YPos + (Width / 2) + 45, Text, 2, 2, 0);
    }
    else
    {
        draw_text_transformed(XPos, YPos + (Width / 2) + 13, Text, 2, 2, 0);
    }
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
