<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Initializing = true;
Reverse = false;
Rotation = 0;
Count = 0;
Cost = 0;
CostType = '';
Placement = '';
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (x &gt; EndX)
{
    Reverse = true;
}

if (y &gt; EndY)
{
    var Temp = EndY;
    EndY = y;
    y = Temp;
}

Columns = abs((EndX / 16) - (x / 16));
Rows = abs((EndY / 16) - (y / 16));

Initializing = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !(Initializing)
{
    if (Columns &gt;= 0)
    {
        for (var i = 0; i &lt;= Rows; i++)
        {
            var CreateInstance = false;
            switch (Placement)
            {
                case (''):
                {
                    var List = scr_InstancesAtPoint(x, y + (i * 16), all, true, true);
                    var MinDepth = 999;
                    var MinInstance = noone;
                    if (List != noone)
                    {
                        for (var j = 0; j &lt; ds_list_size(List); j++)
                        {
                            var Instance = ds_list_find_value(List, j);
                            if (Instance.depth &lt; MinDepth)
                            {
                                MinDepth = Instance.depth;
                                MinInstance = Instance;
                            }
                        }
                        
                        ds_list_destroy(List);
                        with (MinInstance)
                        {
                            switch (CostType)
                            {
                                case 'Medicine':
                                {
                                    obj_Resources.Medicine += Cost;
                                    break;
                                }
                                
                                case 'Wood':
                                {
                                    obj_Resources.Wood += Cost;
                                    break;  
                                }
                    
                                case 'Mine':
                                {
                                    obj_Resources.Stone += Cost;
                                    break;  
                                }
                    
                                case 'Guns':
                                {
                                    obj_Resources.Guns += Cost;
                                    scr_CheckForElectronics(MinInstance);
                                    break;  
                                }
                    
                                case 'Decorations':
                                {
                                    obj_Resources.Shops += Cost;
                                    scr_CheckForElectronics(MinInstance);
                                    break;  
                                }
                    
                                case 'Power':
                                {
                                    obj_Resources.Power += Cost;
                                    scr_CheckForElectronics(MinInstance);
                                    break;  
                                }
                    
                                case 'Food':
                                {
                                    obj_Resources.Food += Cost;
                                    break;  
                                }
                            }
                            instance_destroy();
                        }
                    }
                    break;
                }
                
                case ('OUTSIDE'):
                {
                    if !(collision_rectangle(x - 7, y + (i * 16) - 7, x + 7, y + (i * 16) + 7, obj_ParentFoundation, false, false)) and !(collision_rectangle(x - 7, y + (i * 16) - 7, x + 7, y + (i * 16) + 7, obj_Spotlight, false, false)) and !(collision_rectangle(x - 7, y + (i * 16) - 7, x + 7, y + (i * 16) + 7, obj_SniperNest, false, false)) and !(collision_rectangle(x - 7, y + (i * 16) - 7, x + 7, y + (i * 16) + 7, obj_Generator, false, false))
                    {
                        CreateInstance = true;
                    }
                    break;    
                }
                
                case ('OUTSIDEDOUBLE'):
                {
                    if !(collision_rectangle(x - 7, y - 7, x + 23, y + 23, obj_ParentFoundation, false, false)) and !(collision_rectangle(x - 7, y - 7, x + 23, y + 23, obj_Spotlight, false, false)) and !(collision_rectangle(x - 7, y - 7, x + 23, y + 23, obj_SniperNest, false, false)) and !(collision_rectangle(x - 7, y - 7, x + 23, y + 23, obj_Generator, false, false))
                    {
                        CreateInstance = true;
                    }
                    break;    
                }
                
                case ('FLOOR'):
                {
                    if (collision_rectangle(x - 7, y + (i * 16) - 7, x + 7, y + (i * 16) + 7, obj_Floor, false, false)) and !(collision_rectangle(x - 7, y + (i * 16) - 7, x + 7, y + (i * 16) + 7, obj_ParentWall, false, false)) and !(collision_rectangle(x - 7, y + (i * 16) - 7, x + 7, y + (i * 16) + 7, obj_ParentElectronic, false, false)) and !(collision_rectangle(x - 7, y + (i * 16) - 7, x + 7, y + (i * 16) + 7, obj_ParentDecoration, false, false)) and !(collision_rectangle(x - 7, y + (i * 16) - 7, x + 7, y + (i * 16) + 7, obj_ParentSurvival, false, false))
                    {
                        CreateInstance = true;
                    }
                    break;
                }
                
                case ('FLOORTWO'):
                {
                    if (Rotation == 0) or (Rotation == 2)
                    {
                        if (collision_rectangle(x - 7, y - 7, x + 23, y + 7, obj_Floor, false, false)) and !(collision_rectangle(x - 7, y - 7, x + 23, y + 7, obj_ParentWall, false, false)) and !(collision_rectangle(x - 7, y - 7, x + 23, y + 7, obj_ParentElectronic, false, false)) and !(collision_rectangle(x - 7, y - 7, x + 23, y + 7, obj_ParentDecoration, false, false)) and !(collision_rectangle(x - 7, y - 7, x + 23, y + 7, obj_ParentSurvival, false, false))
                        {
                            CreateInstance = true;
                        }
                    }
                    else if (Rotation == 1) or (Rotation == 3)
                    {
                        if (collision_rectangle(x - 7, y - 7, x + 7, y + 23, obj_Floor, false, false)) and !(collision_rectangle(x - 7, y - 7, x + 7, y + 23, obj_ParentWall, false, false)) and !(collision_rectangle(x - 7, y - 7, x + 7, y + 23, obj_ParentElectronic, false, false)) and !(collision_rectangle(x - 7, y - 7, x + 7, y + 23, obj_ParentDecoration, false, false)) and !(collision_rectangle(x - 7, y - 7, x + 7, y + 23, obj_ParentSurvival, false, false))
                        {
                            CreateInstance = true;
                        }
                    }
                    break;
                }
                
                case ('FLOORDOUBLE'):
                {
                    if (collision_rectangle(x - 7, y - 7, x + 23, y + 23, obj_Floor, false, false)) and !(collision_rectangle(x - 7, y - 7, x + 23, y + 23, obj_ParentWall, false, false)) and !(collision_rectangle(x - 7, y - 7, x + 23, y + 23, obj_ParentElectronic, false, false)) and !(collision_rectangle(x - 7, y - 7, x + 23, y + 23, obj_ParentDecoration, false, false)) and !(collision_rectangle(x - 7, y - 7, x + 23, y + 23, obj_ParentSurvival, false, false))
                    {
                        CreateInstance = true;
                    }
                    break;
                }
                
                case ('WALL'):
                {
                    var WoodWall = (collision_rectangle(x - 7, y + (i * 16) - 7, x + 7, y + (i * 16) + 7, obj_WoodWall, false, false));
                    var BrickWall = (collision_rectangle(x - 7, y + (i * 16) - 7, x + 7, y + (i * 16) + 7, obj_BrickWall, false, false));
                    if ((WoodWall) or (BrickWall)) and !(collision_rectangle(x - 7, y + (i * 16) - 7, x + 7, y + (i * 16) + 7, obj_IronDoor, false, false)) and !(collision_rectangle(x - 7, y + (i * 16) - 7, x + 7, y + (i * 16) + 7, obj_WoodDoor, false, false)) and !(collision_rectangle(x - 7, y + (i * 16) - 7, x + 7, y + (i * 16) + 7, obj_Window, false, false)) and (scr_CheckValidBuild())
                    {
                        with (instance_nearest(x, y + (i * 16), obj_ParentWall))
                        {
                            instance_destroy();
                        }
                        if (WoodWall)
                        {
                            obj_Resources.Wood += 1;
                        }
                        if (BrickWall)
                        {
                            obj_Resources.Stone += 1;
                        }
                        CreateInstance = true;
                    }
                    break;
                }
                
                case ('GARDEN'):
                {
                    if (collision_rectangle(x - 7, y + (i * 16) - 7, x + 7, y + (i * 16) + 7, obj_Garden, false, false)) and !(collision_rectangle(x - 7, y + (i * 16) - 7, x + 7, y + (i * 16) + 7, obj_ParentElectronic, false, false))
                    {
                        CreateInstance = true;
                    }
                }
                
                case ('OUTSIDE WALL'):
                {
                    var Fence = ((collision_rectangle(x - 7, y + (i * 16) - 7, x + 7, y + (i * 16) + 7, obj_PerimeterFence, false, false)) and (Object == obj_FenceGate));
                    var Wall = ((collision_rectangle(x - 7, y + (i * 16) - 7, x + 7, y + (i * 16) + 7, obj_PerimeterWall, false, false)) and (Object == obj_IronGate));
                    var Collide = (collision_rectangle(x - 7, y + (i * 16) - 7, x + 7, y + (i * 16) + 7, obj_IronGate, false, false)) and !(collision_rectangle(x - 7, y + (i * 16) - 7, x + 7, y + (i * 16) + 7, obj_FenceGate, false, false)) 
                    if (((Fence) or (Wall)) and !(Collide) and (scr_CheckValidBuild()))
                    {
                        with (instance_nearest(x, y + (i * 16), obj_ParentFoundation))
                        {
                            instance_destroy();
                        }
                        
                        if (Fence)
                        {
                            obj_Resources.Wood += 1;
                        }
                        
                        if (Wall)
                        {
                            obj_Resources.Stone += 1;
                        }
                        CreateInstance = true;
                    }
                }
            }
            if (CreateInstance)
            {
                var CanCreate = true;
                switch (CostType)
                {
                    case 'Wood':
                    {
                        if ((obj_Resources.Wood - Cost) &lt; 0)
                        {
                            CanCreate = false;
                            global.Building = false;
                            instance_destroy();
                        }
                        else
                        {
                            obj_Resources.Wood -= Cost;
                        }
                        break;  
                    }
                    
                    case 'Mine':
                    {
                        if ((obj_Resources.Stone - Cost) &lt; 0)
                        {
                            CanCreate = false;
                            global.Building = false;
                            instance_destroy();
                        }
                        else
                        {
                            obj_Resources.Stone -= Cost;
                        }
                        break;  
                    }
                    
                    case 'Guns':
                    {
                        if ((obj_Resources.Guns - Cost) &lt; 0)
                        {
                            CanCreate = false;
                            global.Building = false;
                            instance_destroy();
                        }
                        else
                        {
                            obj_Resources.Guns -= Cost;
                        }
                        break;  
                    }
                    
                    case 'Decorations':
                    {
                        if ((obj_Resources.Shops - Cost) &lt; 0)
                        {
                            CanCreate = false;
                            global.Building = false;
                            instance_destroy();
                        }
                        else
                        {
                            obj_Resources.Shops -= Cost;
                        }
                        break;  
                    }
                    
                    case 'Power':
                    {
                        if ((obj_Resources.Power - Cost) &lt; 0)
                        {
                            CanCreate = false;
                            global.Building = false;
                            instance_destroy();
                        }
                        else
                        {
                            obj_Resources.Power -= Cost;
                        }
                        break;  
                    }
                    
                    case 'Food':
                    {
                        if ((obj_Resources.Food - Cost) &lt; 0)
                        {
                            CanCreate = false;
                            global.Building = false;
                            instance_destroy();
                        }
                        else
                        {
                            obj_Resources.Food -= Cost;
                        }
                        break;  
                    }
                    
                    case 'Medicine':
                    {
                        if ((obj_Resources.Medicine - Cost) &lt; 0)
                        {
                            CanCreate = false;
                            global.Building = false;
                            instance_destroy();
                        }
                        else
                        {
                            obj_Resources.Medicine -= Cost;
                        }
                        break;
                    }
                    
                    default:
                    {
                        CanCreate = false;
                        global.Building = false;
                        instance_destroy();
                        break;
                    }  
                }
                
                if (CanCreate)
                {
                    var Instance = instance_create(x, y + (i * 16), Object);
                    with (Instance)
                    {
                        Name = '';
                        Cost = other.Cost;
                        CostType = other.CostType;
                        Rotation = other.Rotation;
                    }
                    switch (Object)
                    {
                        case (obj_Turret):
                        {
                            Instance.Name = 'TURRET';
                            obj_Electronics.Electronics[obj_Electronics.NumberElectronics] = Instance;
                            obj_Electronics.NumberElectronics++;
                            break;
                        }
                        case (obj_InsideLight):
                        {
                            Instance.Name = 'INSIDE LIGHT';
                            obj_Electronics.Electronics[obj_Electronics.NumberElectronics] = Instance;
                            obj_Electronics.NumberElectronics++;
                            break;
                        }
                        case (obj_Generator):
                        {
                            Instance.Name = 'GENERATOR';
                            obj_Electronics.Electronics[obj_Electronics.NumberElectronics] = Instance;
                            obj_Electronics.NumberElectronics++;
                            break;
                        }
                        case (obj_GardenLight):
                        {
                            Instance.Name = 'GARDEN LIGHT';
                            obj_Electronics.Electronics[obj_Electronics.NumberElectronics] = Instance;
                            obj_Electronics.NumberElectronics++;
                            break;
                        }
                        case (obj_Spotlight):
                        {
                            Instance.Name = 'SPOTLIGHT';
                            obj_Electronics.Electronics[obj_Electronics.NumberElectronics] = Instance;
                            obj_Electronics.NumberElectronics++;
                            break;
                        }
                        case (obj_TV):
                        {
                            Instance.Name = 'TV';
                            obj_Electronics.Electronics[obj_Electronics.NumberElectronics] = Instance;
                            obj_Electronics.NumberElectronics++;
                            break;
                        }
                        case (obj_BulletPrinter):
                        {
                            Instance.Name = 'BULLET PRINTER';
                            obj_Electronics.Electronics[obj_Electronics.NumberElectronics] = Instance;
                            obj_Electronics.NumberElectronics++;
                            break;
                        }
                        case (obj_Fridge):
                        {
                            Instance.Name = 'FRIDGE';
                            obj_Electronics.Electronics[obj_Electronics.NumberElectronics] = Instance;
                            obj_Electronics.NumberElectronics++;
                            break;
                        }
                    }
                }
            }
            if (Placement == 'FLOORTWO') or (Placement == 'FLOORDOUBLE') or (Placement == 'OUTSIDEDOUBLE')
            {
                global.Building = false;
                instance_destroy();
            }
        }
        Columns--;
        if (Reverse)
        {
            x -= 16;
        }
        else
        {
            x += 16;
        }
    }
    else
    {
        global.Building = false;
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
